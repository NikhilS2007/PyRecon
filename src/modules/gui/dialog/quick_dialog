from PySide6.QtWidgets import (
    QWidget,
    QDialog, 
    QDialogButtonBox, 
    QGridLayout,
    QLabel, 
    QLineEdit,
    QComboBox,
    QVBoxLayout,
    QHBoxLayout
)

from modules.gui.utils import notify

from .helper import resizeLineEdit, BrowseWidget

class BCDialog(QDialog):

    def __init__(self, parent, structure : list):
        """Create a quick dialog from a given structure.
        
            Params:
                parent (QWidget): the widget containing the dialog
                structure (list): the structure of the dialog
        """
        super().__init__(parent)

        self.setWindowTitle("Dialog")
        self.v_layout = QVBoxLayout()
        self.inputs = []
        self.check_inputs = {}

        for row_structure in structure:
            row_layout = QHBoxLayout()
            for item in row_layout:
                if type(item) is str:  # Label
                    row_layout.addWidget(QLabel(self, text=item))
                else:
                    widget_type, params = item
                    if widget_type == "text":  # Text input
                        # Params structure: str
                        text = params
                        le = QLineEdit(text, self)
                        row_layout.addWidget(le)
                        self.inputs.append(le)
                    elif widget_type == "int": 
                        # Params structure: (int, optional: list[int])
                        n = params[0]
                        if len(params) > 1:
                            options = params[1]
                        else:
                            options = None
                        if n is None:
                            le = QLineEdit("", self)
                        else:
                            le = QLineEdit(str(n), self)
                        row_layout.addWidget(le)
                        self.inputs.append(le)
                        self.check_inputs[len(self.inputs)-1] = ("int", options)
                    elif widget_type == "float":
                        # Params structure (float, optional: (float, float))
                        n = params[0]
                        if len(params) > 1:
                            float_range = params[1]
                        if n is None:
                            le = QLineEdit("", self)
                        else:
                            le = QLineEdit(str(n), self)
                        row_layout.addWidget(le)
                        self.inputs.append(le)
                        self.check_inputs[len(self.inputs)-1] = ("float", float_range)
                    elif widget_type == "combo":
                        # Params structure: (list[str], optional: str)
                        options = params[0]
                        combo = QComboBox(self)
                        combo.addItems([""] + options)
                        if len(params) > 1:
                            selected = params[1]
                            combo.setCurrentText(selected)
                        self.inputs.append(combo)
                        self.check_inputs[len(self.inputs)-1] = ("combo",)
                    elif widget_type == "check":
                        # Params structure (list[(str, bool)])
                        container = QWidget(self)
                        options = params


                        




        b_text = QLabel(self, text="Brightness (-100 - 100):")
        b_input = QLineEdit(self)
        resizeLineEdit(b_input, "000")

        c_text = QLabel(self, text="Contrast (-100 - 100):")
        c_input = QLineEdit(self)
        resizeLineEdit(c_input, "000")

        grid = QGridLayout()

        grid.addWidget(b_text, 0, 0)
        grid.addWidget(b_input, 0, 1)

        grid.addWidget(c_text, 1, 0)
        grid.addWidget(c_input, 1, 1)

        self.inputs = [b_input, c_input]

        QBtn = QDialogButtonBox.Ok | QDialogButtonBox.Cancel
        buttonbox = QDialogButtonBox(QBtn)
        buttonbox.accepted.connect(self.accept)
        buttonbox.rejected.connect(self.reject)

        vlayout = QVBoxLayout()
        vlayout.setSpacing(10)
        vlayout.addLayout(grid)
        vlayout.addWidget(buttonbox)

        self.setLayout(vlayout)
    
    def accept(self):
        """Overwritten from parent class."""
        for input in self.inputs:
            try:
                n = int(input.text())
            except ValueError:
                notify("Please enter a valid number.")
                return
            if not -100 <= n <= 100:
                notify("Please enter a number between -100 and 100.")
                return
        
        super().accept()
    
    def exec(self):
        "Run the dialog."
        confirmed = super().exec()
        if confirmed:
            b = int(self.inputs[0].text())
            c = int(self.inputs[1].text())
            return (b, c), True
        else:
            return None, False 
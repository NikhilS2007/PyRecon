#!/usr/bin/env python

import sys
import re
import json
from pathlib import Path
from typing import Union


class GridFile:

    def __init__(self, filepath):

        self.filepath = Path(filepath)
        self.name = filepath.name
        self.name_original = self.name
        self.grid_pattern = r'^(.*?)_(g|G|grid|Grid)(\d+).*?(s|S|section|Section)(\d+)_(.*?)$'
        self.name_corrected = self.correct_name()

    @property 
    def matches_pattern(self) -> bool:

        regexp = re.compile(self.grid_pattern)
        matches = True if regexp.search(self.name) else False

        return matches

    @property
    def name_parts(self) -> tuple:

        match = re.match(self.grid_pattern, self.name)
    
        before_g  = match.group(1)
        g_number  = match.group(3)
        s_number  = match.group(5)
        end       = match.group(6)

        return before_g, g_number, s_number, end

    def correct_name(self) -> Union[str, None]:
        """Get corrected name."""

        if self.matches_pattern:

            start, grid, section, end = self.name_parts

            return f"{start}_G{grid:0>3}_S{section:0>3}_{end}"
    
        else:

            return None

    def rename_file(self, log: Union[Path, None]=None) -> None:

        if self.matches_pattern and self.name_corrected:

            new_path = self.filepath.with_name(self.name_corrected)
            self.filepath.rename(new_path)

            change = f"{self.name} â†’ {self.name_corrected}"
            print(change)

            if log:

                with log.open("a") as f:
                    
                    f.write(change + "\n")


class ImgDir:

    def __init__(self, directory):

        self.directory = Path(directory)

        if not self.directory.exists():
            
            raise FileNotFoundError(f"The directory {self.directory} does not exist.")
        
        if not self.directory.is_dir():
            
            raise NotADirectoryError(f"{self.directory} is not a directory.")

        self.grid_images = [
            GridFile(f)
            for f
            in self.directory.iterdir()
            if f.suffix != ".jser"
        ]
        
        self.jsers = list(self.directory.glob("*.jser"))

    def correct_grid_naming(self):

        for img in self.grid_images:

            log_name = f"{self.directory.name}_img_changes.txt"
            log_fp = self.directory / log_name
            
            img.rename_file(log=log_fp)

        if self.jsers:  ## TODO: Correct to allow user to point to specific jser

            original_jser = self.jsers[0]
            
            with original_jser.open("r") as jser:
                
                jser_data = json.load(jser)

            for section in jser_data.get("sections"):

                src_img = section.get("src")

                for g in self.grid_images:

                    # print(f"{g.name = }")
                    # print(f"{g.name_original = }")
                    # print(f"{src_img = }")

                    if src_img == g.name:

                        section["src"] = g.name_corrected

            ## Re-sort sections

            resorted = sorted(
                jser_data["sections"],
                key=lambda section: section["src"]
            )

            jser_data["sections"] = resorted

            ## Write a new jser to file

            new_jser_name = original_jser.stem + "_corrected.jser"
            new_jser = original_jser.with_name(new_jser_name)
                        
            with new_jser.open("w") as new_jser:

                new_jser.write(json.dumps(jser_data))


def usage():

    print("Usage: fix-grid-numbering <directory>")
    sys.exit()


if __name__ == "__main__":

    if len(sys.argv) != 2:

        usage()

    my_dir = ImgDir(sys.argv[1])
    my_dir.correct_grid_naming()
    sys.exit(0)
